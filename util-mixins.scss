/// Util Mixins for Sass
/// by: Matt Ximenes 
/// Github: https://github.com/MatheusXimenes
/// linkedIn: https://www.linkedin.com/in/matheusximenes/


/// Loop for CSS3 prefixes - type 1
/// @param {any} $property property 
/// @param {any} $value value
@mixin prefix($property, $value, $prefixes: (webkit moz ms o)) {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }
    // Non-prefixed declaration
    #{$property}: $value;
  }


/// Loop for CSS3 prefixes - type 2
/// @param {any} $property property 
/// @param {any} $value value
@mixin other_prefix($property, $value, $prefixes: (webkit moz ms o)) {
    @each $prefix in $prefixes {
        #{$property}: #{'-'+$prefix+'-'+$value};
    }
    // Non-prefixed declaration
    #{$property}: $value;
}


/// Select Especific CSS for a especific Brownser
/// @param {any} $browser type of Brownser 
@mixin xbrowser($browsers: Mozilla) {
    @each $browser in $browsers {
      html[data-browser*="#{$browser}"] & {
        @content;
      }
    }
  }


/// Rotation with CSS3
/// @param {deg} $rotation 7deg (default)
/// Require prefix mixin
@mixin rotate($rotation: 7deg){
    @include prefix(transform, rotate($rotation));}


/// Rounder Corner with CSS3
/// @param {em} $radius 0.5em (default)
/// Require prefix mixin
@mixin rounded($radius: 0.5em) {
    @include prefix(border-radius, $radius);}


/// Gradient in Gerenal
/// @param {color} $from first-color
/// @param {color} $to second-color
/// @param {direction} $direction top (default)
/// Require other_prefix mixin
@mixin gradient($from, $to, $direction: top) {
    background-color: $from;
    @include other_prefix(background, linear-gradient($direction, $from, $to));
    filter:  progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}');}


/// Opacity
/// @param {color} $color white (default)
/// @param {opacity} $opacity 85% (default)
@mixin background-opacity($color: #fff, $opacity: 0.85) {
    background: $color;
    background: rgba($color, $opacity);}


/// Box Shadow
/// @param {horizontal} $horizontal 
/// @param {colverticalor} $colverticalor 
/// @param {blur} $blur
/// @param {spread} $spread '' (default)
/// @param {color} $color rgba(0,0,0,0.1) (default)
/// Require prefix mixin
@mixin box-shadow($horizontal, $vertical, $blur, $spread: '', $color: 'rgba(0,0,0,0.1)') {
    @if ($inset != "") {
        @include prefix(box-shadow, $inset $horizontal $vertical $blur $spread $color);
    } @else {
        @include prefix(box-shadow, $horizontal $vertical $blur $spread $color);
    }

    filter: progid:DXImageTransform.Microsoft.Blur(PixelRadius=#{$spred},MakeShadow=true,ShadowOpacity=0.32);
	-ms-filter: "progid:DXImageTransform.Microsoft.Blur(PixelRadius=#{$spred},MakeShadow=true,ShadowOpacity=0.30)";
    zoom: 1;
}


/// Transitions
/// @param {property} $property none (default)
/// @param {time} $time 0.5s (default)
/// @param {type} $type ease (default)
/// Require prefix mixin
@mixin transition($property, $time: 0.5s, $type: ease) {
    @include prefix(transition, $property $time $type);
}
